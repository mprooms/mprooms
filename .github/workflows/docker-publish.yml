name: Docker

on:
  push:
    branches:
      - master

  # Run tests for any PRs.
  pull_request:

env:
  GITHUB_SHORTSHA: ${GITHUB_SHA::7}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [frontend, backend, nginx]
    steps:
      - uses: actions/checkout@v2
      - name: Test ${{ matrix.image }} image build
        uses: docker/build-push-action@v1
        with:
          path: ${{ matrix.image }}
          push: false

  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    strategy:
      matrix:
        image: [frontend, backend, nginx]

    steps:
      - uses: actions/checkout@v2

      - name: Pull existing image
        # Pull the image that was pushed by the previous job (different
        # builder!) so that we can use it as a cache for the subsequent build.
        run: |
          docker pull mprooms/${{ matrix.image }}:$GITHUB_SHORTSHA

      - name: Build and push ${{ matrix.image }} image
        uses: docker/build-push-action@v1
        with:
          username: mproomsci
          password: ${{ secrets.DOCKER_MPROOMSCI_TOKEN }}
          tag_with_ref: true
          tag_with_sha: true
          repository: mprooms/${{ matrix.image }}
          cache_froms: mprooms/${{ matrix.image }}:latest
          path: ${{ matrix.image }}

  deploy:
    needs: push
    runs-on: ubuntu-latest

    # Do not run this for PRs
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      - name: Deploy via SSH
        run: |
          # Be verbose for troubleshooting purposes:
          set -o xtrace

          umask 0077
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_MPROOMS_VM }}" > ~/.ssh/id_rsa
          echo -e "Host ${{ secrets.MASTER_DEPLOYMENT_HOSTNAME }}\nUser ubuntu\nStrictHostKeyChecking=no" > ~/.ssh/config

          # Shut down existing deployment (if possible)
          ssh ${{ secrets.MASTER_DEPLOYMENT_HOSTNAME }} bash -c "'if [[ -f docker-compose.yaml ]]; then docker-compose down --remove-orphans; fi'"

          # Copy YAML onto target host
          scp docker-compose.yaml ${{ secrets.MASTER_DEPLOYMENT_HOSTNAME }}:

          # Prepare .env file for docker-compose on target host
          cat > .env <<EOF
          MPROOMS_VERSION=sha-$GITHUB_SHORTSHA
          GATEKEEPER_CLIENT_ID=${{ secrets.GATEKEEPER_CLIENT_ID }}
          GATEKEEPER_CLIENT_SECRET=${{ secrets.GATEKEEPER_CLIENT_SECRET }}
          GATEKEEPER_DISCOVERY_URL=${{ secrets.GATEKEEPER_DISCOVERY_URL }}
          HOST_FQDN=${{ secrets.HOST_FQDN }}
          ACME_ADMIN_EMAIL=${{ secrets.ACME_ADMIN_EMAIL }}
          EOF
          scp .env ${{ secrets.MASTER_DEPLOYMENT_HOSTNAME }}:

          # Deploy current version
          ssh ${{ secrets.MASTER_DEPLOYMENT_HOSTNAME }} docker-compose up -d
